//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.11.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace org.jacodb.api.net.generated.models
{


  /// <summary>
  /// <p>Generated from: IlModel.kt:23</p>
  /// </summary>
  public class IlModel : RdExtBase
  {
    //fields
    //public fields

    //private fields
    //primary constructor
    private IlModel(
    )
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics



    protected override long SerializationHash => -8157052343340335439L;

    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      serializers.Register(IlAsmDto.Read, IlAsmDto.Write);
      serializers.Register(IlTypeDto.Read, IlTypeDto.Write);
      serializers.Register(IlFieldDto.Read, IlFieldDto.Write);
      serializers.Register(IlLocalVarDto.Read, IlLocalVarDto.Write);
      serializers.Register(IlTempVarDto.Read, IlTempVarDto.Write);
      serializers.Register(IlErrVarDto.Read, IlErrVarDto.Write);
      serializers.Register(IlMethodDto.Read, IlMethodDto.Write);
      serializers.Register(IlDto_Unknown.Read, IlDto_Unknown.Write);
      serializers.Register(IlVarDto_Unknown.Read, IlVarDto_Unknown.Write);

      serializers.RegisterToplevelOnce(typeof(IlRoot), IlRoot.RegisterDeclaredTypesSerializers);
    }

    public IlModel(Lifetime lifetime, IProtocol protocol) : this()
    {
      Identify(protocol.Identities, RdId.Root.Mix("IlModel"));
      Bind(lifetime, protocol, "IlModel");
    }

    //constants

    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("IlModel (");
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }


  /// <summary>
  /// <p>Generated from: IlModel.kt:30</p>
  /// </summary>
  public sealed class AsmCacheKey : IPrintable, IEquatable<AsmCacheKey>
  {
    //fields
    //public fields
    public int Asm {get; private set;}

    //private fields
    //primary constructor
    public AsmCacheKey(
      int asm
    )
    {
      Asm = asm;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct(out int asm)
    {
      asm = Asm;
    }
    //statics

    public static CtxReadDelegate<AsmCacheKey> Read = (ctx, reader) =>
    {
      var asm = reader.ReadInt();
      var _result = new AsmCacheKey(asm);
      return _result;
    };

    public static CtxWriteDelegate<AsmCacheKey> Write = (ctx, writer, value) =>
    {
      writer.Write(value.Asm);
    };

    //constants

    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((AsmCacheKey) obj);
    }
    public bool Equals(AsmCacheKey other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Asm == other.Asm;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Asm.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("AsmCacheKey (");
      using (printer.IndentCookie()) {
        printer.Print("asm = "); Asm.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }


  /// <summary>
  /// <p>Generated from: IlModel.kt:24</p>
  /// </summary>
  public sealed class CacheKey : IPrintable, IEquatable<CacheKey>
  {
    //fields
    //public fields
    public int Asm {get; private set;}
    public int Mod {get; private set;}
    public int Inst {get; private set;}

    //private fields
    //primary constructor
    public CacheKey(
      int asm,
      int mod,
      int inst
    )
    {
      Asm = asm;
      Mod = mod;
      Inst = inst;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct(out int asm, out int mod, out int inst)
    {
      asm = Asm;
      mod = Mod;
      inst = Inst;
    }
    //statics

    public static CtxReadDelegate<CacheKey> Read = (ctx, reader) =>
    {
      var asm = reader.ReadInt();
      var mod = reader.ReadInt();
      var inst = reader.ReadInt();
      var _result = new CacheKey(asm, mod, inst);
      return _result;
    };

    public static CtxWriteDelegate<CacheKey> Write = (ctx, writer, value) =>
    {
      writer.Write(value.Asm);
      writer.Write(value.Mod);
      writer.Write(value.Inst);
    };

    //constants

    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((CacheKey) obj);
    }
    public bool Equals(CacheKey other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Asm == other.Asm && Mod == other.Mod && Inst == other.Inst;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Asm.GetHashCode();
        hash = hash * 31 + Mod.GetHashCode();
        hash = hash * 31 + Inst.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("CacheKey (");
      using (printer.IndentCookie()) {
        printer.Print("asm = "); Asm.PrintEx(printer); printer.Println();
        printer.Print("mod = "); Mod.PrintEx(printer); printer.Println();
        printer.Print("inst = "); Inst.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }


  /// <summary>
  /// <p>Generated from: IlModel.kt:36</p>
  /// </summary>
  public sealed class IlAsmDto : IlDto
  {
    //fields
    //public fields
    [NotNull] public AsmCacheKey Id {get; private set;}
    [NotNull] public string Location {get; private set;}

    //private fields
    //primary constructor
    public IlAsmDto(
      [NotNull] AsmCacheKey id,
      [NotNull] string location
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      if (location == null) throw new ArgumentNullException("location");

      Id = id;
      Location = location;
    }
    //secondary constructor
    //deconstruct trait
    //statics

    public static new CtxReadDelegate<IlAsmDto> Read = (ctx, reader) =>
    {
      var id = AsmCacheKey.Read(ctx, reader);
      var location = reader.ReadString();
      var _result = new IlAsmDto(id, location);
      return _result;
    };

    public static new CtxWriteDelegate<IlAsmDto> Write = (ctx, writer, value) =>
    {
      AsmCacheKey.Write(ctx, writer, value.Id);
      writer.Write(value.Location);
    };

    //constants

    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((IlAsmDto) obj);
    }
    public bool Equals(IlAsmDto other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Id, other.Id) && Location == other.Location;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + Location.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("IlAsmDto (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("location = "); Location.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }


  /// <summary>
  /// <p>Generated from: IlModel.kt:34</p>
  /// </summary>
  public abstract class IlDto{
    //fields
    //public fields

    //private fields
    //primary constructor
    //secondary constructor
    //deconstruct trait
    //statics

    public static CtxReadDelegate<IlDto> Read = Polymorphic<IlDto>.ReadAbstract(IlDto_Unknown.Read);

    public static CtxWriteDelegate<IlDto> Write = Polymorphic<IlDto>.Write;

    //constants

    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }


  public sealed class IlDto_Unknown : IlDto
  {
    //fields
    //public fields

    //private fields
    //primary constructor
    //secondary constructor
    //deconstruct trait
    //statics

    public static new CtxReadDelegate<IlDto_Unknown> Read = (ctx, reader) =>
    {
      var _result = new IlDto_Unknown();
      return _result;
    };

    public static new CtxWriteDelegate<IlDto_Unknown> Write = (ctx, writer, value) =>
    {
    };

    //constants

    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((IlDto_Unknown) obj);
    }
    public bool Equals(IlDto_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return true;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("IlDto_Unknown (");
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }


  /// <summary>
  /// <p>Generated from: IlModel.kt:75</p>
  /// </summary>
  public sealed class IlErrVarDto : IlVarDto
  {
    //fields
    //public fields

    //private fields
    //primary constructor
    public IlErrVarDto(
      [NotNull] CacheKey type,
      int index
    ) : base (
      type,
      index
     )
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics

    public static new CtxReadDelegate<IlErrVarDto> Read = (ctx, reader) =>
    {
      var type = CacheKey.Read(ctx, reader);
      var index = reader.ReadInt();
      var _result = new IlErrVarDto(type, index);
      return _result;
    };

    public static new CtxWriteDelegate<IlErrVarDto> Write = (ctx, writer, value) =>
    {
      CacheKey.Write(ctx, writer, value.Type);
      writer.Write(value.Index);
    };

    //constants

    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((IlErrVarDto) obj);
    }
    public bool Equals(IlErrVarDto other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Type, other.Type) && Index == other.Index;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Type.GetHashCode();
        hash = hash * 31 + Index.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("IlErrVarDto (");
      using (printer.IndentCookie()) {
        printer.Print("type = "); Type.PrintEx(printer); printer.Println();
        printer.Print("index = "); Index.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }


  /// <summary>
  /// <p>Generated from: IlModel.kt:50</p>
  /// </summary>
  public sealed class IlFieldDto : IlDto
  {
    //fields
    //public fields
    [NotNull] public CacheKey Id {get; private set;}
    [NotNull] public CacheKey DeclType {get; private set;}
    [NotNull] public CacheKey FieldType {get; private set;}
    public bool IsStatic {get; private set;}
    [NotNull] public string Name {get; private set;}

    //private fields
    //primary constructor
    public IlFieldDto(
      [NotNull] CacheKey id,
      [NotNull] CacheKey declType,
      [NotNull] CacheKey fieldType,
      bool isStatic,
      [NotNull] string name
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      if (declType == null) throw new ArgumentNullException("declType");
      if (fieldType == null) throw new ArgumentNullException("fieldType");
      if (name == null) throw new ArgumentNullException("name");

      Id = id;
      DeclType = declType;
      FieldType = fieldType;
      IsStatic = isStatic;
      Name = name;
    }
    //secondary constructor
    //deconstruct trait
    //statics

    public static new CtxReadDelegate<IlFieldDto> Read = (ctx, reader) =>
    {
      var id = CacheKey.Read(ctx, reader);
      var declType = CacheKey.Read(ctx, reader);
      var fieldType = CacheKey.Read(ctx, reader);
      var isStatic = reader.ReadBool();
      var name = reader.ReadString();
      var _result = new IlFieldDto(id, declType, fieldType, isStatic, name);
      return _result;
    };

    public static new CtxWriteDelegate<IlFieldDto> Write = (ctx, writer, value) =>
    {
      CacheKey.Write(ctx, writer, value.Id);
      CacheKey.Write(ctx, writer, value.DeclType);
      CacheKey.Write(ctx, writer, value.FieldType);
      writer.Write(value.IsStatic);
      writer.Write(value.Name);
    };

    //constants

    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((IlFieldDto) obj);
    }
    public bool Equals(IlFieldDto other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Id, other.Id) && Equals(DeclType, other.DeclType) && Equals(FieldType, other.FieldType) && IsStatic == other.IsStatic && Name == other.Name;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + DeclType.GetHashCode();
        hash = hash * 31 + FieldType.GetHashCode();
        hash = hash * 31 + IsStatic.GetHashCode();
        hash = hash * 31 + Name.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("IlFieldDto (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("declType = "); DeclType.PrintEx(printer); printer.Println();
        printer.Print("fieldType = "); FieldType.PrintEx(printer); printer.Println();
        printer.Print("isStatic = "); IsStatic.PrintEx(printer); printer.Println();
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }


  /// <summary>
  /// <p>Generated from: IlModel.kt:69</p>
  /// </summary>
  public sealed class IlLocalVarDto : IlVarDto
  {
    //fields
    //public fields
    public bool IsPinned {get; private set;}

    //private fields
    //primary constructor
    public IlLocalVarDto(
      bool isPinned,
      [NotNull] CacheKey type,
      int index
    ) : base (
      type,
      index
     )
    {
      IsPinned = isPinned;
    }
    //secondary constructor
    //deconstruct trait
    //statics

    public static new CtxReadDelegate<IlLocalVarDto> Read = (ctx, reader) =>
    {
      var type = CacheKey.Read(ctx, reader);
      var index = reader.ReadInt();
      var isPinned = reader.ReadBool();
      var _result = new IlLocalVarDto(isPinned, type, index);
      return _result;
    };

    public static new CtxWriteDelegate<IlLocalVarDto> Write = (ctx, writer, value) =>
    {
      CacheKey.Write(ctx, writer, value.Type);
      writer.Write(value.Index);
      writer.Write(value.IsPinned);
    };

    //constants

    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((IlLocalVarDto) obj);
    }
    public bool Equals(IlLocalVarDto other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return IsPinned == other.IsPinned && Equals(Type, other.Type) && Index == other.Index;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + IsPinned.GetHashCode();
        hash = hash * 31 + Type.GetHashCode();
        hash = hash * 31 + Index.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("IlLocalVarDto (");
      using (printer.IndentCookie()) {
        printer.Print("isPinned = "); IsPinned.PrintEx(printer); printer.Println();
        printer.Print("type = "); Type.PrintEx(printer); printer.Println();
        printer.Print("index = "); Index.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }


  /// <summary>
  /// <p>Generated from: IlModel.kt:78</p>
  /// </summary>
  public sealed class IlMethodDto : IlDto
  {
    //fields
    //public fields
    [NotNull] public CacheKey Id {get; private set;}
    [Nullable] public CacheKey DeclType {get; private set;}
    [Nullable] public CacheKey ReturnType {get; private set;}
    [NotNull] public string Name {get; private set;}
    [NotNull] public List<IlParameterDto> Parameters {get; private set;}
    public bool Resolved {get; private set;}
    [NotNull] public List<IlLocalVarDto> Locals {get; private set;}
    [NotNull] public List<IlTempVarDto> Temps {get; private set;}
    [NotNull] public List<IlErrVarDto> Errs {get; private set;}
    [NotNull] public List<IlStmtDto> Body {get; private set;}

    //private fields
    //primary constructor
    public IlMethodDto(
      [NotNull] CacheKey id,
      [Nullable] CacheKey declType,
      [Nullable] CacheKey returnType,
      [NotNull] string name,
      [NotNull] List<IlParameterDto> parameters,
      bool resolved,
      [NotNull] List<IlLocalVarDto> locals,
      [NotNull] List<IlTempVarDto> temps,
      [NotNull] List<IlErrVarDto> errs,
      [NotNull] List<IlStmtDto> body
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      if (name == null) throw new ArgumentNullException("name");
      if (parameters == null) throw new ArgumentNullException("parameters");
      if (locals == null) throw new ArgumentNullException("locals");
      if (temps == null) throw new ArgumentNullException("temps");
      if (errs == null) throw new ArgumentNullException("errs");
      if (body == null) throw new ArgumentNullException("body");

      Id = id;
      DeclType = declType;
      ReturnType = returnType;
      Name = name;
      Parameters = parameters;
      Resolved = resolved;
      Locals = locals;
      Temps = temps;
      Errs = errs;
      Body = body;
    }
    //secondary constructor
    //deconstruct trait
    //statics

    public static new CtxReadDelegate<IlMethodDto> Read = (ctx, reader) =>
    {
      var id = CacheKey.Read(ctx, reader);
      var declType = ReadCacheKeyNullable(ctx, reader);
      var returnType = ReadCacheKeyNullable(ctx, reader);
      var name = reader.ReadString();
      var parameters = ReadIlParameterDtoList(ctx, reader);
      var resolved = reader.ReadBool();
      var locals = ReadIlLocalVarDtoList(ctx, reader);
      var temps = ReadIlTempVarDtoList(ctx, reader);
      var errs = ReadIlErrVarDtoList(ctx, reader);
      var body = ReadIlStmtDtoList(ctx, reader);
      var _result = new IlMethodDto(id, declType, returnType, name, parameters, resolved, locals, temps, errs, body);
      return _result;
    };
    public static CtxReadDelegate<CacheKey> ReadCacheKeyNullable = CacheKey.Read.NullableClass();
    public static CtxReadDelegate<List<IlParameterDto>> ReadIlParameterDtoList = IlParameterDto.Read.List();
    public static CtxReadDelegate<List<IlLocalVarDto>> ReadIlLocalVarDtoList = IlLocalVarDto.Read.List();
    public static CtxReadDelegate<List<IlTempVarDto>> ReadIlTempVarDtoList = IlTempVarDto.Read.List();
    public static CtxReadDelegate<List<IlErrVarDto>> ReadIlErrVarDtoList = IlErrVarDto.Read.List();
    public static CtxReadDelegate<List<IlStmtDto>> ReadIlStmtDtoList = IlStmtDto.Read.List();

    public static new CtxWriteDelegate<IlMethodDto> Write = (ctx, writer, value) =>
    {
      CacheKey.Write(ctx, writer, value.Id);
      WriteCacheKeyNullable(ctx, writer, value.DeclType);
      WriteCacheKeyNullable(ctx, writer, value.ReturnType);
      writer.Write(value.Name);
      WriteIlParameterDtoList(ctx, writer, value.Parameters);
      writer.Write(value.Resolved);
      WriteIlLocalVarDtoList(ctx, writer, value.Locals);
      WriteIlTempVarDtoList(ctx, writer, value.Temps);
      WriteIlErrVarDtoList(ctx, writer, value.Errs);
      WriteIlStmtDtoList(ctx, writer, value.Body);
    };
    public static  CtxWriteDelegate<CacheKey> WriteCacheKeyNullable = CacheKey.Write.NullableClass();
    public static  CtxWriteDelegate<List<IlParameterDto>> WriteIlParameterDtoList = IlParameterDto.Write.List();
    public static  CtxWriteDelegate<List<IlLocalVarDto>> WriteIlLocalVarDtoList = IlLocalVarDto.Write.List();
    public static  CtxWriteDelegate<List<IlTempVarDto>> WriteIlTempVarDtoList = IlTempVarDto.Write.List();
    public static  CtxWriteDelegate<List<IlErrVarDto>> WriteIlErrVarDtoList = IlErrVarDto.Write.List();
    public static  CtxWriteDelegate<List<IlStmtDto>> WriteIlStmtDtoList = IlStmtDto.Write.List();

    //constants

    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((IlMethodDto) obj);
    }
    public bool Equals(IlMethodDto other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Id, other.Id) && Equals(DeclType, other.DeclType) && Equals(ReturnType, other.ReturnType) && Name == other.Name && Parameters.SequenceEqual(other.Parameters) && Resolved == other.Resolved && Locals.SequenceEqual(other.Locals) && Temps.SequenceEqual(other.Temps) && Errs.SequenceEqual(other.Errs) && Body.SequenceEqual(other.Body);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + (DeclType != null ? DeclType.GetHashCode() : 0);
        hash = hash * 31 + (ReturnType != null ? ReturnType.GetHashCode() : 0);
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + Parameters.ContentHashCode();
        hash = hash * 31 + Resolved.GetHashCode();
        hash = hash * 31 + Locals.ContentHashCode();
        hash = hash * 31 + Temps.ContentHashCode();
        hash = hash * 31 + Errs.ContentHashCode();
        hash = hash * 31 + Body.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("IlMethodDto (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("declType = "); DeclType.PrintEx(printer); printer.Println();
        printer.Print("returnType = "); ReturnType.PrintEx(printer); printer.Println();
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("parameters = "); Parameters.PrintEx(printer); printer.Println();
        printer.Print("resolved = "); Resolved.PrintEx(printer); printer.Println();
        printer.Print("locals = "); Locals.PrintEx(printer); printer.Println();
        printer.Print("temps = "); Temps.PrintEx(printer); printer.Println();
        printer.Print("errs = "); Errs.PrintEx(printer); printer.Println();
        printer.Print("body = "); Body.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }


  /// <summary>
  /// <p>Generated from: IlModel.kt:58</p>
  /// </summary>
  public sealed class IlParameterDto : IPrintable, IEquatable<IlParameterDto>
  {
    //fields
    //public fields
    public int Index {get; private set;}
    [NotNull] public CacheKey Type {get; private set;}
    [NotNull] public string Name {get; private set;}
    [Nullable] public string DefaultValue {get; private set;}

    //private fields
    //primary constructor
    public IlParameterDto(
      int index,
      [NotNull] CacheKey type,
      [NotNull] string name,
      [Nullable] string defaultValue
    )
    {
      if (type == null) throw new ArgumentNullException("type");
      if (name == null) throw new ArgumentNullException("name");

      Index = index;
      Type = type;
      Name = name;
      DefaultValue = defaultValue;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct(out int index, [NotNull] out CacheKey type, [NotNull] out string name, [Nullable] out string defaultValue)
    {
      index = Index;
      type = Type;
      name = Name;
      defaultValue = DefaultValue;
    }
    //statics

    public static CtxReadDelegate<IlParameterDto> Read = (ctx, reader) =>
    {
      var index = reader.ReadInt();
      var type = CacheKey.Read(ctx, reader);
      var name = reader.ReadString();
      var defaultValue = ReadStringNullable(ctx, reader);
      var _result = new IlParameterDto(index, type, name, defaultValue);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();

    public static CtxWriteDelegate<IlParameterDto> Write = (ctx, writer, value) =>
    {
      writer.Write(value.Index);
      CacheKey.Write(ctx, writer, value.Type);
      writer.Write(value.Name);
      WriteStringNullable(ctx, writer, value.DefaultValue);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();

    //constants

    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((IlParameterDto) obj);
    }
    public bool Equals(IlParameterDto other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Index == other.Index && Equals(Type, other.Type) && Name == other.Name && Equals(DefaultValue, other.DefaultValue);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Index.GetHashCode();
        hash = hash * 31 + Type.GetHashCode();
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + (DefaultValue != null ? DefaultValue.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("IlParameterDto (");
      using (printer.IndentCookie()) {
        printer.Print("index = "); Index.PrintEx(printer); printer.Println();
        printer.Print("type = "); Type.PrintEx(printer); printer.Println();
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("defaultValue = "); DefaultValue.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }


  /// <summary>
  /// <p>Generated from: IlModel.kt:73</p>
  /// </summary>
  public sealed class IlTempVarDto : IlVarDto
  {
    //fields
    //public fields

    //private fields
    //primary constructor
    public IlTempVarDto(
      [NotNull] CacheKey type,
      int index
    ) : base (
      type,
      index
     )
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics

    public static new CtxReadDelegate<IlTempVarDto> Read = (ctx, reader) =>
    {
      var type = CacheKey.Read(ctx, reader);
      var index = reader.ReadInt();
      var _result = new IlTempVarDto(type, index);
      return _result;
    };

    public static new CtxWriteDelegate<IlTempVarDto> Write = (ctx, writer, value) =>
    {
      CacheKey.Write(ctx, writer, value.Type);
      writer.Write(value.Index);
    };

    //constants

    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((IlTempVarDto) obj);
    }
    public bool Equals(IlTempVarDto other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Type, other.Type) && Index == other.Index;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Type.GetHashCode();
        hash = hash * 31 + Index.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("IlTempVarDto (");
      using (printer.IndentCookie()) {
        printer.Print("type = "); Type.PrintEx(printer); printer.Println();
        printer.Print("index = "); Index.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }


  /// <summary>
  /// <p>Generated from: IlModel.kt:41</p>
  /// </summary>
  public sealed class IlTypeDto : IlDto
  {
    //fields
    //public fields
    [NotNull] public CacheKey Id {get; private set;}
    [NotNull] public string Name {get; private set;}
    [NotNull] public List<CacheKey> GenericArgs {get; private set;}
    public bool IsGenericParam {get; private set;}
    public bool IsValueType {get; private set;}
    public bool IsManaged {get; private set;}

    //private fields
    //primary constructor
    public IlTypeDto(
      [NotNull] CacheKey id,
      [NotNull] string name,
      [NotNull] List<CacheKey> genericArgs,
      bool isGenericParam,
      bool isValueType,
      bool isManaged
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      if (name == null) throw new ArgumentNullException("name");
      if (genericArgs == null) throw new ArgumentNullException("genericArgs");

      Id = id;
      Name = name;
      GenericArgs = genericArgs;
      IsGenericParam = isGenericParam;
      IsValueType = isValueType;
      IsManaged = isManaged;
    }
    //secondary constructor
    //deconstruct trait
    //statics

    public static new CtxReadDelegate<IlTypeDto> Read = (ctx, reader) =>
    {
      var id = CacheKey.Read(ctx, reader);
      var name = reader.ReadString();
      var genericArgs = ReadCacheKeyList(ctx, reader);
      var isGenericParam = reader.ReadBool();
      var isValueType = reader.ReadBool();
      var isManaged = reader.ReadBool();
      var _result = new IlTypeDto(id, name, genericArgs, isGenericParam, isValueType, isManaged);
      return _result;
    };
    public static CtxReadDelegate<List<CacheKey>> ReadCacheKeyList = CacheKey.Read.List();

    public static new CtxWriteDelegate<IlTypeDto> Write = (ctx, writer, value) =>
    {
      CacheKey.Write(ctx, writer, value.Id);
      writer.Write(value.Name);
      WriteCacheKeyList(ctx, writer, value.GenericArgs);
      writer.Write(value.IsGenericParam);
      writer.Write(value.IsValueType);
      writer.Write(value.IsManaged);
    };
    public static  CtxWriteDelegate<List<CacheKey>> WriteCacheKeyList = CacheKey.Write.List();

    //constants

    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((IlTypeDto) obj);
    }
    public bool Equals(IlTypeDto other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Id, other.Id) && Name == other.Name && GenericArgs.SequenceEqual(other.GenericArgs) && IsGenericParam == other.IsGenericParam && IsValueType == other.IsValueType && IsManaged == other.IsManaged;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + GenericArgs.ContentHashCode();
        hash = hash * 31 + IsGenericParam.GetHashCode();
        hash = hash * 31 + IsValueType.GetHashCode();
        hash = hash * 31 + IsManaged.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("IlTypeDto (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("genericArgs = "); GenericArgs.PrintEx(printer); printer.Println();
        printer.Print("isGenericParam = "); IsGenericParam.PrintEx(printer); printer.Println();
        printer.Print("isValueType = "); IsValueType.PrintEx(printer); printer.Println();
        printer.Print("isManaged = "); IsManaged.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }


  /// <summary>
  /// <p>Generated from: IlModel.kt:64</p>
  /// </summary>
  public abstract class IlVarDto : IlDto
  {
    //fields
    //public fields
    [NotNull] public CacheKey Type {get; private set;}
    public int Index {get; private set;}

    //private fields
    //primary constructor
    protected IlVarDto(
      [NotNull] CacheKey type,
      int index
    )
    {
      if (type == null) throw new ArgumentNullException("type");

      Type = type;
      Index = index;
    }
    //secondary constructor
    //deconstruct trait
    //statics

    public static new CtxReadDelegate<IlVarDto> Read = Polymorphic<IlVarDto>.ReadAbstract(IlVarDto_Unknown.Read);

    public static new CtxWriteDelegate<IlVarDto> Write = Polymorphic<IlVarDto>.Write;

    //constants

    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }


  public sealed class IlVarDto_Unknown : IlVarDto
  {
    //fields
    //public fields

    //private fields
    //primary constructor
    public IlVarDto_Unknown(
      [NotNull] CacheKey type,
      int index
    ) : base (
      type,
      index
     )
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics

    public static new CtxReadDelegate<IlVarDto_Unknown> Read = (ctx, reader) =>
    {
      var type = CacheKey.Read(ctx, reader);
      var index = reader.ReadInt();
      var _result = new IlVarDto_Unknown(type, index);
      return _result;
    };

    public static new CtxWriteDelegate<IlVarDto_Unknown> Write = (ctx, writer, value) =>
    {
      CacheKey.Write(ctx, writer, value.Type);
      writer.Write(value.Index);
    };

    //constants

    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((IlVarDto_Unknown) obj);
    }
    public bool Equals(IlVarDto_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Type, other.Type) && Index == other.Index;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Type.GetHashCode();
        hash = hash * 31 + Index.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("IlVarDto_Unknown (");
      using (printer.IndentCookie()) {
        printer.Print("type = "); Type.PrintEx(printer); printer.Println();
        printer.Print("index = "); Index.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
