//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.11.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace org.jacodb.api.net.generated.models
{
  
  
  /// <summary>
  /// <p>Generated from: IlSigModel.kt:23</p>
  /// </summary>
  public class IlSigModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IRdEndpoint<PublicationRequest, PublicationResponse> Publication => _Publication;
    [NotNull] public IRdEndpoint<PublicationRequest, List<IlTypeDto>> CallForAsm => _CallForAsm;
    [NotNull] public ISignal<PublicationRequest> AsmRequest => _AsmRequest;
    [NotNull] public ISignal<List<IlDto>> AsmResponse => _AsmResponse;
    
    //private fields
    [NotNull] private readonly RdCall<PublicationRequest, PublicationResponse> _Publication;
    [NotNull] private readonly RdCall<PublicationRequest, List<IlTypeDto>> _CallForAsm;
    [NotNull] private readonly RdSignal<PublicationRequest> _AsmRequest;
    [NotNull] private readonly RdSignal<List<IlDto>> _AsmResponse;
    
    //primary constructor
    private IlSigModel(
      [NotNull] RdCall<PublicationRequest, PublicationResponse> publication,
      [NotNull] RdCall<PublicationRequest, List<IlTypeDto>> callForAsm,
      [NotNull] RdSignal<PublicationRequest> asmRequest,
      [NotNull] RdSignal<List<IlDto>> asmResponse
    )
    {
      if (publication == null) throw new ArgumentNullException("publication");
      if (callForAsm == null) throw new ArgumentNullException("callForAsm");
      if (asmRequest == null) throw new ArgumentNullException("asmRequest");
      if (asmResponse == null) throw new ArgumentNullException("asmResponse");
      
      _Publication = publication;
      _CallForAsm = callForAsm;
      _AsmRequest = asmRequest;
      _AsmResponse = asmResponse;
      _AsmRequest.Async = true;
      _AsmResponse.Async = true;
      BindableChildren.Add(new KeyValuePair<string, object>("publication", _Publication));
      BindableChildren.Add(new KeyValuePair<string, object>("callForAsm", _CallForAsm));
      BindableChildren.Add(new KeyValuePair<string, object>("asmRequest", _AsmRequest));
      BindableChildren.Add(new KeyValuePair<string, object>("asmResponse", _AsmResponse));
    }
    //secondary constructor
    internal IlSigModel (
    ) : this (
      new RdCall<PublicationRequest, PublicationResponse>(PublicationRequest.Read, PublicationRequest.Write, PublicationResponse.Read, PublicationResponse.Write),
      new RdCall<PublicationRequest, List<IlTypeDto>>(PublicationRequest.Read, PublicationRequest.Write, ReadIlTypeDtoList, WriteIlTypeDtoList),
      new RdSignal<PublicationRequest>(PublicationRequest.Read, PublicationRequest.Write),
      new RdSignal<List<IlDto>>(ReadIlDtoList, WriteIlDtoList)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<List<IlTypeDto>> ReadIlTypeDtoList = IlTypeDto.Read.List();
    public static CtxReadDelegate<List<IlDto>> ReadIlDtoList = IlDto.Read.List();
    
    public static  CtxWriteDelegate<List<IlTypeDto>> WriteIlTypeDtoList = IlTypeDto.Write.List();
    public static  CtxWriteDelegate<List<IlDto>> WriteIlDtoList = IlDto.Write.List();
    
    protected override long SerializationHash => -1254477867872549445L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(IlRoot), IlRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("IlSigModel (");
      using (printer.IndentCookie()) {
        printer.Print("publication = "); _Publication.PrintEx(printer); printer.Println();
        printer.Print("callForAsm = "); _CallForAsm.PrintEx(printer); printer.Println();
        printer.Print("asmRequest = "); _AsmRequest.PrintEx(printer); printer.Println();
        printer.Print("asmResponse = "); _AsmResponse.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  public static class IlModelIlSigModelEx
   {
    public static IlSigModel GetIlSigModel(this IlModel ilModel)
    {
      return ilModel.GetOrCreateExtension("ilSigModel", () => new IlSigModel());
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: IlSigModel.kt:24</p>
  /// </summary>
  public sealed class PublicationRequest : IPrintable, IEquatable<PublicationRequest>
  {
    //fields
    //public fields
    [NotNull] public List<string> RootAsms {get; private set;}
    
    //private fields
    //primary constructor
    public PublicationRequest(
      [NotNull] List<string> rootAsms
    )
    {
      if (rootAsms == null) throw new ArgumentNullException("rootAsms");
      
      RootAsms = rootAsms;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out List<string> rootAsms)
    {
      rootAsms = RootAsms;
    }
    //statics
    
    public static CtxReadDelegate<PublicationRequest> Read = (ctx, reader) => 
    {
      var rootAsms = ReadStringList(ctx, reader);
      var _result = new PublicationRequest(rootAsms);
      return _result;
    };
    public static CtxReadDelegate<List<string>> ReadStringList = JetBrains.Rd.Impl.Serializers.ReadString.List();
    
    public static CtxWriteDelegate<PublicationRequest> Write = (ctx, writer, value) => 
    {
      WriteStringList(ctx, writer, value.RootAsms);
    };
    public static  CtxWriteDelegate<List<string>> WriteStringList = JetBrains.Rd.Impl.Serializers.WriteString.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((PublicationRequest) obj);
    }
    public bool Equals(PublicationRequest other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return RootAsms.SequenceEqual(other.RootAsms);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + RootAsms.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("PublicationRequest (");
      using (printer.IndentCookie()) {
        printer.Print("rootAsms = "); RootAsms.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: IlSigModel.kt:27</p>
  /// </summary>
  public sealed class PublicationResponse : IPrintable, IEquatable<PublicationResponse>
  {
    //fields
    //public fields
    [NotNull] public List<string> ReachableAsms {get; private set;}
    [NotNull] public List<List<string>> ReferencedAsms {get; private set;}
    [NotNull] public List<IlTypeDto> ReachableTypes {get; private set;}
    
    //private fields
    //primary constructor
    public PublicationResponse(
      [NotNull] List<string> reachableAsms,
      [NotNull] List<List<string>> referencedAsms,
      [NotNull] List<IlTypeDto> reachableTypes
    )
    {
      if (reachableAsms == null) throw new ArgumentNullException("reachableAsms");
      if (referencedAsms == null) throw new ArgumentNullException("referencedAsms");
      if (reachableTypes == null) throw new ArgumentNullException("reachableTypes");
      
      ReachableAsms = reachableAsms;
      ReferencedAsms = referencedAsms;
      ReachableTypes = reachableTypes;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out List<string> reachableAsms, [NotNull] out List<List<string>> referencedAsms, [NotNull] out List<IlTypeDto> reachableTypes)
    {
      reachableAsms = ReachableAsms;
      referencedAsms = ReferencedAsms;
      reachableTypes = ReachableTypes;
    }
    //statics
    
    public static CtxReadDelegate<PublicationResponse> Read = (ctx, reader) => 
    {
      var reachableAsms = ReadStringList(ctx, reader);
      var referencedAsms = ReadStringListList(ctx, reader);
      var reachableTypes = ReadIlTypeDtoList(ctx, reader);
      var _result = new PublicationResponse(reachableAsms, referencedAsms, reachableTypes);
      return _result;
    };
    public static CtxReadDelegate<List<string>> ReadStringList = JetBrains.Rd.Impl.Serializers.ReadString.List();
    public static CtxReadDelegate<List<List<string>>> ReadStringListList = JetBrains.Rd.Impl.Serializers.ReadString.List().List();
    public static CtxReadDelegate<List<IlTypeDto>> ReadIlTypeDtoList = IlTypeDto.Read.List();
    
    public static CtxWriteDelegate<PublicationResponse> Write = (ctx, writer, value) => 
    {
      WriteStringList(ctx, writer, value.ReachableAsms);
      WriteStringListList(ctx, writer, value.ReferencedAsms);
      WriteIlTypeDtoList(ctx, writer, value.ReachableTypes);
    };
    public static  CtxWriteDelegate<List<string>> WriteStringList = JetBrains.Rd.Impl.Serializers.WriteString.List();
    public static  CtxWriteDelegate<List<List<string>>> WriteStringListList = JetBrains.Rd.Impl.Serializers.WriteString.List().List();
    public static  CtxWriteDelegate<List<IlTypeDto>> WriteIlTypeDtoList = IlTypeDto.Write.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((PublicationResponse) obj);
    }
    public bool Equals(PublicationResponse other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ReachableAsms.SequenceEqual(other.ReachableAsms) && ReferencedAsms.SequenceEqual(other.ReferencedAsms) && ReachableTypes.SequenceEqual(other.ReachableTypes);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + ReachableAsms.ContentHashCode();
        hash = hash * 31 + ReferencedAsms.ContentHashCode();
        hash = hash * 31 + ReachableTypes.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("PublicationResponse (");
      using (printer.IndentCookie()) {
        printer.Print("reachableAsms = "); ReachableAsms.PrintEx(printer); printer.Println();
        printer.Print("referencedAsms = "); ReferencedAsms.PrintEx(printer); printer.Println();
        printer.Print("reachableTypes = "); ReachableTypes.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
